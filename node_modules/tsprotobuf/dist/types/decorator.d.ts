import { IConverter } from "./converter";
import type { ObjectProto } from "./object_proto";
import { IProtobufElement, ProtobufBasicTypes } from "./type";
export interface ProtobufPropertyParams<T = unknown> {
    /**
     * Property name in protobuf message. If not specified, property name will be used.
     */
    name?: string;
    /**
     * Property id in protobuf message.
     */
    id: number;
    /**
     * Defines if property is required.
     */
    required?: boolean;
    /**
     * Defines if property is repeated.
     */
    repeated?: boolean;
    /**
     * Defines property type.
     */
    type?: ProtobufBasicTypes;
    /**
     * Defines property converter. If not specified, default converter will be used.
     */
    converter?: IConverter<T>;
    /**
     * Defines default value for property.
     */
    defaultValue?: T;
    /**
     * Defines property parser.
     */
    parser?: typeof ObjectProto;
}
/**
 * Decorator for protobuf class.
 * @param params - Decorator parameters.
 * @returns Class decorator.
 */
export declare function ProtobufElement(params: IProtobufElement): ClassDecorator;
/**
 * Decorator for protobuf property
 * @param params - Property parameters.
 * @returns Property decorator.
 */
export declare function ProtobufProperty<T>(params: ProtobufPropertyParams<T>): PropertyDecorator;
