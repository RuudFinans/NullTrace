/**
 * Converter interface.
 */
export interface IConverter<In> {
    /**
     * Converts value to Uint8Array.
     * @param value - Value to convert.
     * @returns Byte array representation of the value.
     */
    set: (value: In) => Promise<Uint8Array>;
    /**
     * Converts value from Uint8Array.
     * @param value - Byte array to convert.
     * @returns Converted value.
     */
    get: (value: Uint8Array) => Promise<In>;
}
/**
 * ArrayBuffer converter.
 */
export declare class ArrayBufferConverter {
    static set(value: ArrayBuffer): Promise<Uint8Array>;
    static get(value: Uint8Array): Promise<ArrayBufferLike>;
}
/**
 * String converter.
 */
export declare class StringConverter {
    static set(value: string): Promise<Uint8Array>;
    static get(value: Uint8Array): Promise<string>;
}
