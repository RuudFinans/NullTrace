import { IProtobufSchemeItem, IProtobufSerializable } from "./type";
/**
 * Base class for protobuf objects.
 */
export declare class ObjectProto implements IProtobufSerializable {
    /**
     * Creates new instance of the class from ArrayBuffer or ObjectProto.
     * @param this - Class of the object to create.
     * @param data - Data to import.
     * @returns New instance of the class.
     */
    static importProto<T extends ObjectProto>(this: new () => T, data: ArrayBuffer | ObjectProto): Promise<T>;
    /**
     * Raw data of the object. Represents protobuf message.
     */
    protected raw?: ArrayBuffer | null;
    /**
     * Returns `true` if object is empty. Otherwise `false`.
     * @returns `true` if object is empty, otherwise `false`.
     */
    isEmpty(): boolean;
    /**
     * Returns `true` if object has been changed. Otherwise `false`.
     * @returns `true` if object has been changed, otherwise `false`.
     */
    hasChanged(): boolean;
    importProto(data: ArrayBuffer | ObjectProto): Promise<void>;
    exportProto(): Promise<ArrayBuffer>;
    /**
     * Exports item to protobuf.
     * @param template - Template of the item.
     * @param value - Value of the item.
     * @returns Exported item.
     */
    protected exportItem(template: IProtobufSchemeItem<any>, value: unknown): Promise<any>;
    /**
     * Imports item from protobuf.
     * @param template - Template of the item.
     * @param value - Value of the item.
     * @returns Imported item.
     */
    protected importItem(template: IProtobufSchemeItem<any>, value: any): Promise<any>;
}
